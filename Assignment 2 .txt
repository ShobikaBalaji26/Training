Assignment 3: Function Design and Modularization - Create a document that describes the design of two modular functions: one that returns the factorial of a number, and another that calculates the nth Fibonacci number. Include pseudocode and
 a brief explanation of how modularity in programming helps with code reuse and organization.

function factorial(n):
    if n < 0:
        return "Factorial is not defined for negative numbers."
    elif n == 0 or n == 1:
        return 1
    else:
        result = 1
        for i from 1 to n:
            result = result * i
        return result

function fibonacci(n):
    if n < 0:
        return "Fibonacci sequence is not defined for negative numbers."
    elif n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        fib = [0, 1]
        for i from 2 to n:
            fib[i] = fib[i-1] + fib[i-2]
        return fib[n]


Modularity in programming involves breaking down a software program into separate modules or functions, each responsible for a specific task or functionality. This approach offers several benefits, particularly in terms of code reuse and organization.

Code Reuse
Modularity promotes code reuse by encapsulating specific functionalities within standalone modules or functions. Once a module or function is defined and tested, it can be easily reused in different parts of the same program or even in multiple projects without duplicating code. This reduces redundancy, minimizes errors, and improves efficiency, as developers can leverage existing code rather than writing new code from scratch.

Organization
Modularity enhances code organization by structuring the codebase into logical and manageable units. Each module or function is responsible for a specific task, making it easier to understand, update, and maintain the code. This organized structure facilitates collaboration among developers, as they can work on individual modules or functions independently without affecting other parts of the codebase. Additionally, it simplifies debugging and troubleshooting, as issues can be isolated to specific modules or functions, making it easier to identify and fix problems.

In summary, modularity in programming fosters code reuse by encapsulating reusable functionalities into standalone modules or functions, and it enhances code organization by structuring the codebase into logical and manageable units, thereby promoting efficient development, maintenance, and collaboration.







